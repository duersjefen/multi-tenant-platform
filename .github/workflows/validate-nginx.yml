name: Validate Nginx Configs

on:
  push:
    branches: [main, develop]
    paths:
      - 'platform/nginx/**'
      - 'config/projects.yml'
      - 'lib/generate-nginx-configs.py'
  pull_request:
    branches: [main, develop]
    paths:
      - 'platform/nginx/**'
      - 'config/projects.yml'
      - 'lib/generate-nginx-configs.py'
  workflow_dispatch:

jobs:
  validate-configs:
    name: Validate Nginx Configuration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Validate projects.yml syntax
        run: |
          echo "📋 Validating projects.yml syntax..."
          python3 -c "import yaml; yaml.safe_load(open('config/projects.yml'))"
          echo "✅ projects.yml is valid YAML"

      - name: Regenerate nginx configs
        run: |
          echo "🔧 Regenerating nginx configs from projects.yml..."
          python3 lib/generate-nginx-configs.py

      - name: Check for uncommitted changes
        run: |
          echo "📋 Checking if generated configs match committed configs..."
          if ! git diff --quiet platform/nginx/conf.d/; then
            echo "❌ Generated configs differ from committed configs!"
            echo ""
            echo "The following files have differences:"
            git diff --name-only platform/nginx/conf.d/
            echo ""
            echo "Please regenerate configs and commit:"
            echo "  python3 lib/generate-nginx-configs.py"
            echo "  git add platform/nginx/conf.d/"
            echo "  git commit -m 'chore: Regenerate nginx configs'"
            exit 1
          fi
          echo "✅ Generated configs match committed configs"

      - name: Validate reuseport count
        run: |
          echo "📋 Validating reuseport directive count..."
          reuseport_count=$(grep -r "listen 443 quic reuseport" platform/nginx/conf.d/ | wc -l)
          echo "Found $reuseport_count reuseport directive(s)"

          if [ "$reuseport_count" -ne 1 ]; then
            echo "❌ Expected exactly 1 reuseport directive, found $reuseport_count"
            echo ""
            echo "Locations:"
            grep -rn "listen 443 quic reuseport" platform/nginx/conf.d/ || true
            echo ""
            echo "nginx only allows reuseport ONCE per address:port"
            exit 1
          fi
          echo "✅ Exactly 1 reuseport directive found"

      - name: Validate HTTP/3 support
        run: |
          echo "📋 Validating HTTP/3 support..."
          missing_http3=0

          for conf in platform/nginx/conf.d/*.conf; do
            if [ -f "$conf" ] && ! grep -q "listen 443 quic" "$conf"; then
              echo "❌ Missing HTTP/3 in: $(basename "$conf")"
              missing_http3=$((missing_http3 + 1))
            fi
          done

          if [ $missing_http3 -gt 0 ]; then
            echo "❌ $missing_http3 config file(s) missing HTTP/3 support"
            exit 1
          fi
          echo "✅ All configs have HTTP/3 support"

      - name: Install nginx
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx

      - name: Test nginx config syntax
        run: |
          echo "📋 Testing nginx config syntax..."

          # Create minimal nginx.conf for testing
          sudo cp platform/nginx/nginx.conf /etc/nginx/nginx.conf

          # Copy conf.d files
          sudo mkdir -p /etc/nginx/conf.d
          sudo mkdir -p /etc/nginx/includes
          sudo cp platform/nginx/conf.d/*.conf /etc/nginx/conf.d/
          sudo cp platform/nginx/includes/*.conf /etc/nginx/includes/ || true

          # Create mock SSL certificates dynamically from projects.yml
          ./lib/extract-domains.sh > /tmp/domains.txt

          echo "Creating mock certificates..."
          while read domain; do
            sudo mkdir -p "/etc/letsencrypt/live/$domain"
            sudo openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
              -keyout "/etc/letsencrypt/live/$domain/privkey.pem" \
              -out "/etc/letsencrypt/live/$domain/fullchain.pem" \
              -subj "/CN=$domain" 2>/dev/null
            echo "  ✅ $domain"
          done < /tmp/domains.txt

          # Test config
          if sudo nginx -t; then
            echo "✅ Nginx config syntax is valid"
          else
            echo "❌ Nginx config syntax check failed"
            exit 1
          fi

      - name: Summary
        if: success()
        run: |
          echo "======================================================================"
          echo "✅ ALL VALIDATIONS PASSED"
          echo "======================================================================"
          echo "✅ projects.yml syntax valid"
          echo "✅ Generated configs match committed configs"
          echo "✅ Exactly 1 reuseport directive"
          echo "✅ All configs have HTTP/3 support"
          echo "✅ Nginx config syntax valid"
          echo "======================================================================"
