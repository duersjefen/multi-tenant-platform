name: Test Platform Configuration

on:
  pull_request:
    paths:
      - 'platform/**'
      - 'lib/**'
      - '.github/workflows/**'
  push:
    branches:
      - main
    paths:
      - 'platform/**'
      - 'lib/**'
      - '.github/workflows/**'

jobs:
  test:
    name: Test Platform Configuration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Create mock SSL certificates
        run: |
          # Extract all domains from projects.yml dynamically
          DOMAINS=$(python3 <<'PYTHON'
          import yaml

          with open('config/projects.yml', 'r') as f:
              config = yaml.safe_load(f)

          domains = []
          for project_name, project in config.get('projects', {}).items():
              domain_config = project.get('domains', {})

              # Production domains
              if 'production' in domain_config:
                  prod = domain_config['production']
                  if isinstance(prod, list):
                      domains.extend(prod)
                  else:
                      domains.append(prod)

              # Staging domains
              if 'staging' in domain_config:
                  staging = domain_config['staging'].get('domains', [])
                  if isinstance(staging, list):
                      domains.extend(staging)
                  else:
                      domains.append(staging)

          # Print unique domains, one per line
          for domain in sorted(set(domains)):
              print(domain)
          PYTHON
          )

          echo "üìã Domains found in projects.yml:"
          echo "$DOMAINS"
          echo ""

          # Create certificate directories
          echo "$DOMAINS" | while read domain; do
            sudo mkdir -p "/tmp/letsencrypt/live/$domain"
            sudo openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
              -keyout "/tmp/letsencrypt/live/$domain/privkey.pem" \
              -out "/tmp/letsencrypt/live/$domain/fullchain.pem" \
              -subj "/CN=$domain" 2>/dev/null
            echo "  ‚úÖ Created mock certificate for: $domain"
          done

          # Make certificates readable
          sudo chmod -R 755 /tmp/letsencrypt
          sudo chmod -R 644 /tmp/letsencrypt/live/*/privkey.pem

          echo ""
          echo "‚úÖ Created $(echo "$DOMAINS" | wc -l) mock SSL certificates"

      - name: Test nginx config syntax
        run: |
          # Test nginx syntax with mock SSL certificates (run as root like production)
          docker run --rm --user 0 \
            -v ${{ github.workspace }}/platform/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
            -v ${{ github.workspace }}/platform/nginx/includes:/etc/nginx/includes:ro \
            -v ${{ github.workspace }}/platform/nginx/conf.d:/etc/nginx/conf.d:ro \
            -v /tmp/letsencrypt:/etc/letsencrypt:ro \
            macbre/nginx-http3:latest nginx -t

      - name: Validate docker-compose syntax
        run: |
          # Just validate YAML syntax, don't try to resolve paths
          docker compose -f platform/docker-compose.platform.yml config --quiet || {
            echo "‚ùå docker-compose.yml has syntax errors"
            exit 1
          }
          echo "‚úÖ docker-compose.yml syntax is valid"

      - name: Check for HTTP/3 configuration
        run: |
          # Verify HTTP/3 is properly configured
          grep -q "listen 443 quic" platform/nginx/conf.d/*.conf || {
            echo "‚ùå HTTP/3 (QUIC) listeners not found!"
            exit 1
          }

          grep -q "Alt-Svc.*h3=" platform/nginx/nginx.conf || {
            echo "‚ùå Alt-Svc header not configured!"
            exit 1
          }

          grep -q "443:443/udp" platform/docker-compose.platform.yml || {
            echo "‚ùå UDP port 443 not exposed!"
            exit 1
          }

          echo "‚úÖ HTTP/3 configuration validated"

      - name: Report test results
        if: always()
        run: |
          echo "::notice::Platform configuration tests completed"
