name: Test Platform Configuration

on:
  pull_request:
    paths:
      - 'platform/**'
      - 'lib/**'
      - '.github/workflows/**'
  push:
    branches:
      - main
    paths:
      - 'platform/**'
      - 'lib/**'
      - '.github/workflows/**'

jobs:
  test:
    name: Test Platform Configuration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Extract domains from projects.yml
        id: domains
        run: |
          python3 << 'EOF' > /tmp/domains.txt
          import yaml
          with open('config/projects.yml') as f:
              config = yaml.safe_load(f)
          domains = set()
          for project in config.get('projects', {}).values():
              dc = project.get('domains', {})
              if 'production' in dc:
                  p = dc['production']
                  domains.update(p if isinstance(p, list) else [p])
              if 'staging' in dc:
                  s = dc['staging'].get('domains', [])
                  domains.update(s if isinstance(s, list) else [s])
          for d in sorted(domains):
              print(d)
          EOF

          echo "Domains extracted:"
          cat /tmp/domains.txt

      - name: Create mock SSL certificates
        run: |
          while read domain; do
            sudo mkdir -p "/tmp/letsencrypt/live/$domain"
            sudo openssl req -x509 -nodes -days 1 -newkey rsa:2048 \
              -keyout "/tmp/letsencrypt/live/$domain/privkey.pem" \
              -out "/tmp/letsencrypt/live/$domain/fullchain.pem" \
              -subj "/CN=$domain" 2>/dev/null
          done < /tmp/domains.txt

          sudo chmod -R 755 /tmp/letsencrypt
          sudo chmod -R 644 /tmp/letsencrypt/live/*/privkey.pem
          echo "Created $(wc -l < /tmp/domains.txt) certificates"

      - name: Test nginx config syntax
        run: |
          # Test nginx syntax with mock SSL certificates (run as root like production)
          docker run --rm --user 0 \
            -v ${{ github.workspace }}/platform/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
            -v ${{ github.workspace }}/platform/nginx/includes:/etc/nginx/includes:ro \
            -v ${{ github.workspace }}/platform/nginx/conf.d:/etc/nginx/conf.d:ro \
            -v /tmp/letsencrypt:/etc/letsencrypt:ro \
            macbre/nginx-http3:latest nginx -t

      - name: Validate docker-compose syntax
        run: |
          # Just validate YAML syntax, don't try to resolve paths
          docker compose -f platform/docker-compose.platform.yml config --quiet || {
            echo "❌ docker-compose.yml has syntax errors"
            exit 1
          }
          echo "✅ docker-compose.yml syntax is valid"

      - name: Check for HTTP/3 configuration
        run: |
          # Verify HTTP/3 is properly configured
          grep -q "listen 443 quic" platform/nginx/conf.d/*.conf || {
            echo "❌ HTTP/3 (QUIC) listeners not found!"
            exit 1
          }

          grep -q "Alt-Svc.*h3=" platform/nginx/nginx.conf || {
            echo "❌ Alt-Svc header not configured!"
            exit 1
          }

          grep -q "443:443/udp" platform/docker-compose.platform.yml || {
            echo "❌ UDP port 443 not exposed!"
            exit 1
          }

          echo "✅ HTTP/3 configuration validated"

      - name: Report test results
        if: always()
        run: |
          echo "::notice::Platform configuration tests completed"
