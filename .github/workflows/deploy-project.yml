# =============================================================================
# Platform-Driven Project Deployment
# =============================================================================
# This workflow orchestrates deployment of projects hosted on the platform.
#
# Triggers:
#   1. Config changes in platform repo (auto-deploy affected projects)
#   2. New image built in app repo (via repository_dispatch)
#   3. Manual trigger (for redeployments, promotions)
#
# Architecture:
#   - Platform repo is source of truth for deployment configuration
#   - App repos build images and notify platform
#   - Platform decides when and how to deploy
# =============================================================================

name: Deploy Project

on:
  # Trigger 1: Config changes in platform repo
  push:
    branches: [main]
    paths:
      - 'configs/**'
      - 'lib/deploy.sh'
      - 'lib/functions/**'

  # Trigger 2: New image built in app repo
  repository_dispatch:
    types: [new-image]

  # Trigger 3: Manual trigger
  workflow_dispatch:
    inputs:
      project:
        description: 'Project to deploy'
        required: true
        type: choice
        options:
          - filter-ical
          - gabs-massage
          - paiss
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  # =============================================================================
  # Detect which projects need deployment
  # =============================================================================
  detect-changes:
    name: Detect Affected Projects
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.detect.outputs.projects }}
      deploy_staging: ${{ steps.detect.outputs.deploy_staging }}
      deploy_production: ${{ steps.detect.outputs.deploy_production }}

    steps:
      - name: Checkout platform repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit to detect changes

      - name: Detect affected projects
        id: detect
        run: |
          echo "Event: ${{ github.event_name }}"

          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # New image built - deploy that project to staging first
            PROJECT="${{ github.event.client_payload.project }}"
            echo "projects=[\"$PROJECT\"]" >> $GITHUB_OUTPUT
            echo "deploy_staging=true" >> $GITHUB_OUTPUT
            echo "deploy_production=false" >> $GITHUB_OUTPUT
            echo "📦 New image built for: $PROJECT"

          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger
            PROJECT="${{ inputs.project }}"
            ENV="${{ inputs.environment }}"
            echo "projects=[\"$PROJECT\"]" >> $GITHUB_OUTPUT
            echo "deploy_staging=$([ "$ENV" = "staging" ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "deploy_production=$([ "$ENV" = "production" ] && echo true || echo false)" >> $GITHUB_OUTPUT
            echo "🎯 Manual deployment: $PROJECT → $ENV"

          else
            # Config changes - detect which projects affected
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "Changed files:"
            echo "$CHANGED_FILES"

            # Extract project names from configs/ paths
            PROJECTS=$(echo "$CHANGED_FILES" | \
              grep -E '^configs/[^/]+/' | \
              sed 's|^configs/\([^/]*\)/.*|\1|' | \
              sort -u | \
              jq -R -s -c 'split("\n") | map(select(length > 0))')

            if [ "$PROJECTS" = "[]" ] || [ -z "$PROJECTS" ]; then
              echo "projects=[]" >> $GITHUB_OUTPUT
              echo "deploy_staging=false" >> $GITHUB_OUTPUT
              echo "deploy_production=false" >> $GITHUB_OUTPUT
              echo "ℹ️  No project configs changed"
            else
              echo "projects=$PROJECTS" >> $GITHUB_OUTPUT
              echo "deploy_staging=true" >> $GITHUB_OUTPUT
              echo "deploy_production=false" >> $GITHUB_OUTPUT
              echo "🔧 Config changed for: $PROJECTS"
            fi
          fi

  # =============================================================================
  # Deploy to Staging
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy_staging == 'true' && needs.detect-changes.outputs.projects != '[]'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.projects) }}
      fail-fast: false  # Continue deploying other projects even if one fails

    environment:
      name: staging
      url: https://staging.${{ matrix.project }}.de

    steps:
      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to Staging
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} << 'REMOTE'
            set -e

            echo "🚀 Deploying ${{ matrix.project }} to staging..."
            cd /opt/multi-tenant-platform

            # Pull latest platform configs
            echo "📥 Pulling latest platform configurations..."
            git fetch origin
            git reset --hard origin/main

            # Regenerate nginx configs from projects.yml
            echo "🔧 Regenerating nginx configurations..."
            python3 lib/generate-nginx-configs.py

            # Validate nginx config
            echo "🔍 Validating nginx configuration..."
            if ! docker exec platform-nginx nginx -t 2>&1; then
              echo "❌ Nginx configuration invalid - aborting"
              exit 1
            fi

            # Reload nginx
            echo "🔄 Reloading nginx..."
            docker exec platform-nginx nginx -s reload

            # Authenticate to GHCR
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u duersjefen --password-stdin

            # Deploy project
            PLATFORM_ROOT=/opt/multi-tenant-platform \
            ENVIRONMENT=staging \
            ./lib/deploy.sh ${{ matrix.project }} staging

            echo "✅ Deployment complete"
          REMOTE

      - name: 🧪 Verify Deployment
        run: |
          echo "🧪 Verifying external access..."
          sleep 5

          # Test HTTPS endpoint
          URL="https://staging.${{ matrix.project }}.de"
          if curl -f -m 10 "$URL" 2>/dev/null; then
            echo "✅ $URL is accessible"
          else
            echo "❌ $URL is not accessible"
            exit 1
          fi

      - name: 📢 Deployment Success
        if: success()
        run: |
          echo "✅ Staging deployment successful!"
          echo "🌐 URL: https://staging.${{ matrix.project }}.de"
          echo "📝 Commit: ${{ github.sha }}"

  # =============================================================================
  # Deploy to Production (requires manual approval)
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy_production == 'true' && needs.detect-changes.outputs.projects != '[]'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.projects) }}
      fail-fast: false

    environment:
      name: production
      url: https://${{ matrix.project }}.de

    steps:
      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to Production
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i ~/.ssh/id_rsa ${EC2_USER}@${EC2_HOST} << 'REMOTE'
            set -e

            echo "🚀 Deploying ${{ matrix.project }} to production..."
            cd /opt/multi-tenant-platform

            # Pull latest platform configs
            git fetch origin
            git reset --hard origin/main

            # Regenerate nginx configs
            python3 lib/generate-nginx-configs.py

            # Validate nginx
            docker exec platform-nginx nginx -t
            docker exec platform-nginx nginx -s reload

            # Authenticate to GHCR
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u duersjefen --password-stdin

            # Deploy project
            PLATFORM_ROOT=/opt/multi-tenant-platform \
            ENVIRONMENT=production \
            ./lib/deploy.sh ${{ matrix.project }} production

            echo "✅ Production deployment complete"
          REMOTE

      - name: 🧪 Verify Production
        run: |
          echo "🧪 Verifying production access..."
          sleep 5

          URL="https://${{ matrix.project }}.de"
          if curl -f -m 10 "$URL" 2>/dev/null; then
            echo "✅ $URL is accessible"
          else
            echo "❌ $URL is not accessible"
            exit 1
          fi

      - name: 📢 Production Success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "🌐 URL: https://${{ matrix.project }}.de"
