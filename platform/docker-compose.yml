version: '3.8'

# =============================================================================
# Multi-Tenant Platform - Core Infrastructure
# =============================================================================
# Provides shared nginx reverse proxy, PostgreSQL database, and SSL automation
# Apps deploy separately via SSM
# =============================================================================

networks:
  platform:
    name: platform
    driver: bridge

volumes:
  postgres-data:
    name: postgres-platform-data
  certbot-etc:
    name: certbot-etc
  certbot-var:
    name: certbot-var

services:
  # ===========================================================================
  # NGINX - Reverse Proxy (Production + Staging)
  # ===========================================================================
  nginx:
    image: nginx:alpine
    container_name: nginx-platform
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3 support
    networks:
      - platform
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites:ro
      - ./nginx/includes:/etc/nginx/includes:ro
      - certbot-etc:/etc/letsencrypt:ro
      - certbot-var:/var/www/certbot:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================================================
  # PostgreSQL - Shared Database
  # ===========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: postgres-platform
    restart: unless-stopped
    networks:
      - platform
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-platform_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD required}
      POSTGRES_DB: platform
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-platform_admin}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================================================
  # Certbot - SSL Certificate Management
  # ===========================================================================
  certbot:
    image: certbot/certbot:latest
    container_name: certbot-platform
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
