# =============================================================================
# Multi-Tenant Platform - Main Nginx Configuration
# =============================================================================
# This is the MAIN nginx config that routes to all projects on the platform.
# Per-project configurations are auto-generated in conf.d/ from projects.yml
#
# Features:
# - HTTP/3 (QUIC) support for improved performance
# - Zero-downtime deployments via staging-first strategy
# - Automatic SSL certificate management
# - Testing deployment with SSH secrets: 2025-10-02
# =============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance tuning
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ==========================================================================
    # LOGGING
    # ==========================================================================
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # ==========================================================================
    # PERFORMANCE
    # ==========================================================================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss
               application/rss+xml font/truetype font/opentype
               application/vnd.ms-fontobject image/svg+xml;

    # ==========================================================================
    # RATE LIMITING
    # ==========================================================================
    # Define rate limit zones (referenced by projects.yml)
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=100r/s;

    # ==========================================================================
    # SSL/TLS CONFIGURATION
    # ==========================================================================
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # ==========================================================================
    # HTTP/3 (QUIC) CONFIGURATION
    # ==========================================================================
    # Enable early data for 0-RTT resumption
    ssl_early_data on;

    # QUIC transport parameters
    quic_retry on;  # Enable address validation to prevent amplification attacks

    # Advertise HTTP/3 support to clients
    # This header tells browsers: "This server also supports HTTP/3 on port 443"
    add_header Alt-Svc 'h3=":443"; ma=86400' always;

    # ==========================================================================
    # SECURITY HEADERS (applied to all projects)
    # ==========================================================================
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # ==========================================================================
    # DNS RESOLVER (Docker's Internal DNS)
    # ==========================================================================
    # This allows nginx to dynamically resolve container names at runtime
    # rather than requiring them to exist at startup
    # Docker's embedded DNS server is always at 127.0.0.11
    resolver 127.0.0.11 valid=10s ipv6=off;
    resolver_timeout 5s;

    # ==========================================================================
    # UPSTREAM DEFINITIONS (Optional - for load balancing)
    # ==========================================================================
    # NOTE: These upstreams are optional and only used if you need:
    # - Load balancing across multiple container instances
    # - Connection pooling (keepalive)
    # - Advanced health checks
    #
    # For simple single-container deployments, project configs can use
    # variables with proxy_pass directly (see conf.d/*.conf)
    #
    # ==========================================================================
    # NOTE: Adding New Applications
    # ==========================================================================
    # For multi-tenant setup, each app's nginx config (in conf.d/) should
    # use variables with proxy_pass for dynamic DNS resolution:
    #
    # Example in conf.d/my-app.conf:
    #   set $backend_host "my-app-backend";
    #   set $backend_port "3000";
    #   proxy_pass http://$backend_host:$backend_port;
    #
    # This allows nginx to start even if containers don't exist yet

    # ==========================================================================
    # HTTP (PORT 80) - Metrics, Health Checks, and HTTPS Redirect
    # ==========================================================================
    # Industry best practice: Single server block for all port 80 traffic
    # Location processing order: exact match → prefix → regex → catch-all
    server {
        listen 80 default_server;
        server_name _;

        # Metrics endpoint for nginx-prometheus-exporter (internal only)
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
        }

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Allow ACME challenges for Let's Encrypt SSL certificates
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # ==========================================================================
    # PER-PROJECT CONFIGURATIONS
    # ==========================================================================
    # These are auto-generated from projects.yml and stored in conf.d/
    # Each project gets its own server block with routing rules
    include /etc/nginx/conf.d/*.conf;
}