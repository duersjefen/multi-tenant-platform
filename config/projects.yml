# Multi-Tenant Platform - Project Registry
# This file defines all projects hosted on this platform
# Add new projects here to automatically configure deployment, nginx, monitoring, etc.

version: "1.0"

# Platform-wide settings
platform:
  domain: "13.62.136.72"  # EC2 instance
  company_domain: "paiss.me"  # Company domain
  monitoring_domain: "monitoring.paiss.me"  # Platform monitoring
  ssl_email: "info@paiss.me"
  monitoring_enabled: true
  backup_retention_days: 30

# Projects hosted on this platform
projects:

  # =============================================================================
  # PROJECT: filter-ical
  # =============================================================================
  filter-ical:
    # Basic information
    name: "iCal Viewer & Filter"
    repository: "https://github.com/duersjefen/filter-ical"

    # Docker images (built by app repo CI/CD)
    images:
      backend: "ghcr.io/duersjefen/filter-ical-backend"
      frontend: "ghcr.io/duersjefen/filter-ical-frontend"

    # Domains
    domains:
      production:
        - filter-ical.de
        - www.filter-ical.de
      staging:
        subdomain: staging
        domains:
          - staging.filter-ical.de

    # Container configuration
    containers:
      backend:
        name: filter-ical-backend
        port: 3000
        health_check:
          path: /health
          expected_status: 200
          timeout: 30
          retries: 10
          start_period: 60

      frontend:
        name: filter-ical-frontend
        port: 80
        health_check:
          path: /
          expected_status: 200
          timeout: 30
          retries: 10
          start_period: 30

    # Environments
    environments:
      production:
        containers:
          - filter-ical-backend
          - filter-ical-frontend
        deployment_strategy: blue-green
        auto_rollback: true
        health_check_timeout: 120

      staging:
        containers:
          - filter-ical-backend-staging
          - filter-ical-frontend-staging
        deployment_strategy: direct
        auto_rollback: true
        health_check_timeout: 60

    # Nginx configuration
    nginx:
      # API routes (backend)
      api_locations:
        - /api
        - /domains
        - /filter
        - /subscribe
        - /ical

      # Special configurations
      rate_limit:
        zone: api
        rate: 10r/s
        burst: 20

      # Timeouts
      proxy_timeout: 60s
      proxy_connect_timeout: 60s

    # Monitoring & Alerts
    monitoring:
      enabled: true
      alerts:
        - name: production_down
          condition: "up == 0"
          duration: 1m
          severity: critical

        - name: high_error_rate
          condition: "rate(http_5xx[5m]) > 0.05"
          duration: 2m
          severity: warning

        - name: slow_responses
          condition: "p95_latency > 1s"
          duration: 5m
          severity: warning

    # Backup configuration
    backup:
      enabled: true
      pre_deployment: true
      retention: 3  # Keep last 3 backups

    # Database configuration
    database:
      type: postgresql
      container: postgres-platform
      databases:
        production: filterical_production
        staging: filterical_staging
      user: filterical_user
      # Backup configuration
      backup:
        enabled: true
        retention_days: 30  # Keep daily backups for 30 days
        verify_on_restore: true


  # =============================================================================
  # PROJECT: paiss
  # =============================================================================
  paiss:
    # Basic information
    name: "PAISS - Pragmatic AI Software Solutions"
    repository: "https://github.com/duersjefen/paiss"

    # Docker images (built by app repo CI/CD)
    images:
      web: "ghcr.io/duersjefen/paiss"

    # Domains
    domains:
      production:
        - paiss.me
        - www.paiss.me
      staging:
        subdomain: staging
        domains:
          - staging.paiss.me

    # Container configuration
    containers:
      web:
        name: paiss-web
        port: 80
        health_check:
          path: /health
          expected_status: 200
          timeout: 10
          retries: 3
          start_period: 10

    # Environments
    environments:
      production:
        containers:
          - paiss-web
        deployment_strategy: blue-green
        auto_rollback: true
        health_check_timeout: 30

      staging:
        containers:
          - paiss-web-staging
        deployment_strategy: direct
        auto_rollback: true
        health_check_timeout: 30

    # Nginx configuration
    nginx:
      api_locations: []  # Static site, no API
      rate_limit:
        zone: general
        rate: 20r/s
        burst: 50
      proxy_timeout: 30s
      proxy_connect_timeout: 10s

    # Monitoring & Alerts
    monitoring:
      enabled: true
      alerts:
        - name: production_down
          condition: "up == 0"
          duration: 1m
          severity: critical

        - name: high_error_rate
          condition: "rate(http_5xx[5m]) > 0.05"
          duration: 2m
          severity: warning

    # Backup configuration
    backup:
      enabled: false  # Static site, no data to backup


  # =============================================================================
  # PROJECT: gabs-massage
  # =============================================================================
  gabs-massage:
    # Basic information
    name: "Gabs Massage - Physiotherapy Scheduler"
    repository: "https://github.com/duersjefen/physiotherapy-scheduler"

    # Docker images (built by app repo CI/CD)
    images:
      web: "ghcr.io/duersjefen/physiotherapy-scheduler"

    # Domains
    domains:
      production:
        - gabs-massage.de
        - www.gabs-massage.de
      staging:
        subdomain: staging
        domains:
          - staging.gabs-massage.de

    # Container configuration
    containers:
      web:
        name: gabs-massage-web
        port: 3000
        health_check:
          path: /health
          expected_status: 200
          timeout: 30
          retries: 10
          start_period: 40

    # Environments
    environments:
      production:
        containers:
          - gabs-massage-web
        deployment_strategy: blue-green
        auto_rollback: true
        health_check_timeout: 60
        volumes:
          - gabs-massage-data:/app/data  # SQLite database persistence

      staging:
        containers:
          - gabs-massage-web-staging
        deployment_strategy: direct
        auto_rollback: true
        health_check_timeout: 60
        volumes:
          - gabs-massage-staging-data:/app/data  # Separate staging database

    # Nginx configuration
    nginx:
      # API routes (backend)
      api_locations:
        - /api

      # Rate limiting
      rate_limit:
        zone: api
        rate: 20r/s
        burst: 40

      # Timeouts (Clojure startup can be slower)
      proxy_timeout: 90s
      proxy_connect_timeout: 30s

    # Monitoring & Alerts
    monitoring:
      enabled: true
      alerts:
        - name: production_down
          condition: "up == 0"
          duration: 2m
          severity: critical

        - name: high_error_rate
          condition: "rate(http_5xx[5m]) > 0.05"
          duration: 3m
          severity: warning

        - name: slow_responses
          condition: "p95_latency > 3s"
          duration: 5m
          severity: warning

    # Backup configuration
    backup:
      enabled: true
      pre_deployment: true
      retention: 7  # Keep last 7 backups (database snapshots)


  # =============================================================================
  # TEMPLATE: Add new projects below using this structure
  # =============================================================================
  # my-new-app:
  #   name: "My New Application"
  #   repository: "https://github.com/user/my-new-app"
  #   domains:
  #     production:
  #       - my-app.com
  #   containers:
  #     app:
  #       name: my-new-app
  #       port: 8080
  #       health_check:
  #         path: /health
  #         expected_status: 200
  #   environments:
  #     production:
  #       containers:
  #         - my-new-app
  #   nginx:
  #     api_locations: []
  #   monitoring:
  #     enabled: true
  #   backup:
  #     enabled: true