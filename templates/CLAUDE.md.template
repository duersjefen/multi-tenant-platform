# CLAUDE.md - {{PROJECT_NAME}} Project Instructions

Production-ready Vue 3 + Python FastAPI web application with comprehensive TDD workflow and PostgreSQL database.

---

## üéØ CORE PROJECT PRINCIPLES

### Development Workflow (TDD-First)
1. **Write failing test FIRST** ‚Üí `@pytest.mark.future` tests drive implementation
2. **Make minimum implementation** ‚Üí Code only what's needed to pass tests
3. **Refactor safely** ‚Üí `make test` ensures no regression
4. **Test & Commit** ‚Üí Always run `make test` and commit after completing features/fixes
5. **Deploy** ‚Üí `make deploy-staging` (auto) or `make deploy-production` (manual approval)

### Quick Reference
```bash
# Development
make dev                   # Start PostgreSQL + backend + frontend
make stop                  # Stop all development services
make health                # Check service status
make reset-db              # Reset local database

# Testing
make test                  # Run unit tests
make test-all              # Run complete test suite (unit + integration + E2E)

# Database Migrations
make migrate-create        # Create new migration from models
make migrate-up            # Apply pending migrations
make migrate-down          # Revert last migration

# Deployment
make deploy-staging        # Deploy to staging (auto-deploy on push to main)
make deploy-production     # Deploy to production (requires manual approval)
make status                # Check deployment status

# Local Development URLs
# Frontend:  http://localhost:{{FRONTEND_PORT}}
# Backend:   http://localhost:{{BACKEND_PORT}}
# API Docs:  http://localhost:{{BACKEND_PORT}}/docs
# Database:  localhost:5432 (PostgreSQL in Docker)

# NEVER use manual server commands - always use Makefile
# NOTE: Servers have hot-reloading - no restart needed for code changes
```

---

## üèóÔ∏è MANDATORY ARCHITECTURE PRINCIPLES

### 1. Clean Code Organization
**‚úÖ NAMING RULES:**
- Name what it IS, not what it WAS ‚Üí `useAPI.js` not `useUnifiedAPI.js`
- No historical memory ‚Üí No `New`, `Updated`, `Fixed`, `Unified`, `Merged`
- Present-tense documentation ‚Üí Describe current functionality only
- Flat structure when possible ‚Üí `/composables/useAPI.js` not `/composables/api/useAPI.js`

### 2. Contract-Driven Development
**THE MOST IMPORTANT LESSON: OpenAPI specifications are immutable contracts**

```
OpenAPI Contract ‚Üí Implementation Freedom ‚Üí Frontend Independence
```

**‚úÖ Workflow:**
1. Write OpenAPI specification ‚Üí Define exact API behavior
2. Write contract tests ‚Üí Validate implementation matches spec
3. Implement backend ‚Üí Code to pass contract tests
4. Frontend uses contracts ‚Üí Never depends on backend implementation

**Benefits:** Complete backend refactoring freedom without breaking frontend.

### 3. Functional Programming Architecture
**"Functional Core, Imperative Shell" Pattern**

```
app/data/           # PURE FUNCTIONS ONLY (business logic)
app/main.py         # I/O ORCHESTRATION (side effects)
src/composables/    # PURE FUNCTIONS ONLY (data transformations)
src/stores/         # STATE + I/O (reactive boundaries)
```

**‚úÖ Rules:**
- Pure functions in `/data/` and `/composables/` directories
- NO classes for business logic - functions only
- Explicit data flow - no hidden dependencies
- Immutable data transformations - return new objects

### 4. Test-First Development
**‚úÖ TDD Workflow:**
- Unit tests ‚Üí Pure functions, business logic
- Integration tests ‚Üí Component interactions, API endpoints
- E2E tests ‚Üí Real user workflows (HEADLESS ONLY)
- Contract tests ‚Üí API compliance with OpenAPI specs

**Vue 3 + Pinia Reactivity Fix:**
```javascript
// ‚úÖ CORRECT - Use computed for reactive delegation
const user = computed({
  get() { return appStore.user },
  set(value) { appStore.user = value }
})

// ‚ùå WRONG - Simple getters break reactivity
return { get user() { return appStore.user } }
```

---

## üîß CRITICAL BEHAVIORS

### User Notification System
**Required notifications using:**
```bash
/home/martijn/.claude-notifications/claude_notify "message" "type"
```

**Types:** `task_complete`, `error`, `milestone`, `approval_needed`

### Systematic Debugging
**2-Failure Rule:** After 2 failed attempts, IMMEDIATELY find root cause
- Stop micro-debugging ‚Üí Address system-level issues
- Frontend: Use Vue DevTools (available in Vite dev server) for reactive debugging
- AI-accessible debugging ‚Üí Unit tests, E2E tests, HTML debug panels (NOT console.log)

### Professional Guidance
**Must challenge:** Architectural shortcuts, security issues, performance anti-patterns
**Template:** *"This approach will cause [problems] because [reasons]. Instead, [better solution] which [benefits]."*

---

## üö¢ INFRASTRUCTURE

### Local Development (WSL2 or Linux)
- **Backend:** Uvicorn on `localhost:{{BACKEND_PORT}}` (hot reload)
- **Frontend:** Vite on `localhost:{{FRONTEND_PORT}}` (hot reload)
- **Database:** PostgreSQL in Docker on `localhost:5432`
  - Container: `{{PROJECT_NAME}}-postgres-dev`
  - Database: `{{PROJECT_NAME}}_development`
  - Managed by: `docker-compose.dev.yml`

### Production Stack
- **Backend:** Python FastAPI + Uvicorn (port {{BACKEND_PORT}})
- **Frontend:** Vue 3 SPA with Vite + Pinia (port {{FRONTEND_PORT}})
- **Domain:** https://{{DOMAIN}}
- **Staging:** https://staging.{{DOMAIN}}
- **Platform:** Multi-tenant platform on EC2

### Database Migrations
**MANDATORY: Use PostgreSQL + Alembic from Day 1**

**Why PostgreSQL from the start?**
- ‚úÖ Production-grade database from day 1
- ‚úÖ Concurrent access (multiple users)
- ‚úÖ No migration pain later
- ‚úÖ Consistent dev ‚Üí production environment
- ‚úÖ Better for multi-tenant platform

**Why Alembic migrations (not auto-creation)?**
```python
# ‚ùå DANGER: db.create_all() loses data on schema changes
Base.metadata.create_all(bind=engine)  # Adds new columns, orphans old ones

# ‚úÖ SAFE: Alembic preserves data during changes
alembic revision --autogenerate -m "rename_column"
alembic upgrade head  # Data preserved, rollback possible
```

**Setup PostgreSQL in Docker:**

Create `docker-compose.dev.yml`:
```yaml
version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: {{PROJECT_NAME}}-postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: {{PROJECT_NAME}}_dev
      POSTGRES_PASSWORD: dev_password_change_me
      POSTGRES_DB: {{PROJECT_NAME}}_development
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{PROJECT_NAME}}_dev"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  postgres-dev-data:
    name: {{PROJECT_NAME}}-dev-db
```

**Configure Alembic:**
```bash
# Install Alembic
pip install alembic

# Initialize Alembic
cd backend
alembic init alembic

# Configure alembic/env.py to import your models
# Configure alembic.ini with database URL
```

**Migration Workflow:**
```bash
# 1. Define/change your SQLAlchemy models
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    email = Column(String, unique=True)  # New field

# 2. Auto-generate migration from models
make migrate-create name="add_user_email"

# Alembic compares models to database, generates migration:
# backend/alembic/versions/xxx_add_user_email.py

# 3. Review the generated migration (safety check!)
# 4. Apply migration
make migrate-up

# Rollback if needed
make migrate-down
```

**Makefile commands:**
```makefile
migrate-create: ## Create migration (usage: make migrate-create name="add_field")
	cd backend && alembic revision --autogenerate -m "$(name)"

migrate-up: ## Apply pending migrations
	cd backend && alembic upgrade head

migrate-down: ## Revert last migration
	cd backend && alembic downgrade -1

migrate-history: ## Show migration history
	cd backend && alembic history --verbose

migrate-current: ## Show current migration version
	cd backend && alembic current --verbose
```

---

## üìã DEVELOPMENT RULES

**‚úÖ ALWAYS:**
- Use Makefile commands for servers (`make dev`, not manual npm/uvicorn)
- Write OpenAPI specs before implementation
- Pure functions in `/data/` and `/composables/` directories
- Contract tests for API validation
- Headless E2E tests only
- **Alembic for ALL database schema changes** (never db.create_all() in production)
- Run `make test` and commit after completing features/fixes

**‚ùå NEVER:**
- Manual server startup or non-standard ports
- Implementation before OpenAPI specification
- Classes for business logic (functions only)
- Side effects in pure function directories
- Browser pop-ups during automated testing
- **Manual database schema changes or db.create_all() after initial development**

**PURPOSE:** This architecture ensures 100% testability, zero frontend coupling, fearless refactoring, and production reliability.

### Development Tips
- Dev servers usually already running - check with `make health` before starting
- Don't rerun `make dev` when servers are still running
- Use `make stop` to cleanly stop all services
- Always use `make deploy-staging` / `make deploy-production` instead of manual GitHub Actions commands
- Review Alembic migrations before applying (auto-generation is smart but not perfect)

---

## üöÄ GETTING STARTED

### Initial Setup

```bash
# 1. Clone the repository
git clone https://github.com/{{REPO_OWNER}}/{{REPO_NAME}}.git
cd {{REPO_NAME}}

# 2. Install dependencies
make setup

# This will:
# - Install Python dependencies (backend/venv)
# - Install Node dependencies (frontend/node_modules)
# - Start PostgreSQL in Docker
# - Apply database migrations

# 3. Start development
make dev

# Servers will be available at:
# - Frontend: http://localhost:{{FRONTEND_PORT}}
# - Backend: http://localhost:{{BACKEND_PORT}}
# - API Docs: http://localhost:{{BACKEND_PORT}}/docs

# 4. Run tests
make test

# 5. Make changes and deploy
# ... edit code ...
make test
git add . && git commit -m "Description"
make deploy-staging
```

### Project Structure (Recommended)

```
{{REPO_NAME}}/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ data/          # Pure business logic functions
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models/        # SQLAlchemy models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routers/       # FastAPI route handlers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ core/          # Config, database, auth
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.py        # FastAPI application
‚îÇ   ‚îú‚îÄ‚îÄ alembic/           # Database migrations
‚îÇ   ‚îú‚îÄ‚îÄ tests/             # Backend tests
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt   # Python dependencies
‚îÇ   ‚îî‚îÄ‚îÄ alembic.ini        # Migration config
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/    # Vue components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ composables/   # Pure functions (data transformations)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stores/        # Pinia state + I/O
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ App.vue
‚îÇ   ‚îú‚îÄ‚îÄ tests/             # Frontend tests
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ docker-compose.dev.yml # PostgreSQL for development
‚îú‚îÄ‚îÄ Makefile               # Development commands
‚îî‚îÄ‚îÄ openapi.yaml           # API contract (optional, recommended)
```

---

## üìö RELATED DOCUMENTATION

**Platform Documentation:**
- `/home/martijn/Desktop/multi-tenant-platform/CLAUDE.md` - Platform architecture
- Platform deployment: `./lib/deploy.sh {{PROJECT_NAME}} <environment>`

**Reference Projects:**
- filter-ical: Full-featured example with PostgreSQL + Alembic
- Check `/home/martijn/Desktop/filter-ical/` for patterns

---

**Generated:** Auto-generated from multi-tenant-platform template
**Platform:** https://github.com/duersjefen/multi-tenant-platform
**Last Updated:** {{GENERATION_DATE}}
